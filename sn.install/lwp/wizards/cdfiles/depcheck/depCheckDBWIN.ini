;*** Registry functions *****************************
#function getRegKey         com.ibm.commerce.depchecker.tools.RegTool::getRegKey(1)
#function regKeyExists      com.ibm.commerce.depchecker.tools.RegTool::regKeyExists(1)
#function firstKey          com.ibm.commerce.depchecker.tools.RegTool::getFirstKey(2)
#function getVersionSubKey  com.ibm.commerce.depchecker.tools.RegTool::getVersionSubKey(1)
#function verSubKeyExists   com.ibm.commerce.depchecker.tools.RegTool::versionSubKeyExists(1)
#function getRegNumChildren com.ibm.commerce.depchecker.tools.RegTool::getNumChildren(1)

;*** XML functions **********************************
; XMLTagExists: parse an XML file for the existance of a tag
; param 1 - The XML file to parse
; param 2 - The tag names to find to get the value
; returns: true if the tag specified exists, false otherwise
#function XMLTagExists 	com.ibm.commerce.depchecker.tools.XMLTool::tagExists(2)

; XMLTagExistsString: parse an XML string for the existance of a tag
; param 1 - The XML string to parse
; param 2 - The tag names to find to get the value
; returns: true if the tag specified exists, false otherwise
#function XMLTagExistsString 	com.ibm.commerce.depchecker.tools.XMLTool::tagExistsInString(2)

; getXMLValue: parse an XML file for the value of a tag
; param 1 - The XML file to parse
; param 2 - The tag names to find to get the value
; returns: The value associated with the specified tags
#function getXMLValue 	com.ibm.commerce.depchecker.tools.XMLTool::tagValue(3)

; getXMLValueString: parse an XML string for the value of a tag
; param 1 - The XML string to parse
; param 2 - The tag names to find to get the value
; returns: The value associated with the specified tags
#function getXMLValueString 	com.ibm.commerce.depchecker.tools.XMLTool::tagValueFromString(3)

;*** System property functions **********************
; getEnvironment: get the value of an environment variable
; param 1 - The name of the environment variable to retrieve
; returns: The value of the named environment variable
#function getEnvironment   com.ibm.commerce.depchecker.tools.MiscTool::getEnvironment(1)

; getFilesystems: Get a list of fixed file system names
; returns: A File.separator delimited list of fixed filesystem names
#function getFilesystems   com.ibm.commerce.depchecker.tools.MiscTool::getFilesystems(0)

; getRemovable: Get a list of removable filesystem names
; returns: A File.separator delimited list of removable filesystem names
#function getRemovable     com.ibm.commerce.depchecker.tools.MiscTool::getRemovable(0)

; getFreespace: Get amount of free space
; param 1 - The directory or filesystem to check for free space
#function getFreespace     com.ibm.commerce.depchecker.tools.MiscTool::getFreespace(1)

; getMostFreespace: Get the file system with the most freespace
; returns: The filesystem with the most freespace
#function getMostFreespace com.ibm.commerce.depchecker.tools.MiscTool::getMostFreespace(0)

; getHostname: Get the host name
; returns: The hostname of the system
#function getHostname	  com.ibm.commerce.depchecker.tools.MiscTool::getHostname(0)

; isUserAdmin: Determine if user had administrative priviledges
; returns: true if user has admin priviledges, false otherwise
#function isUserAdmin     com.ibm.commerce.depchecker.tools.MiscTool::isUserAdmin(0)

; getLocale: Get the system's locale
; returns - the Java locale as a String
#function getLocale       com.ibm.commerce.depchecker.tools.MiscTool::getLocale(0)

;*** Comparison functions ***************************
; min: Return the minimum of two strings
; param 1 - a number String
; param 2 - another number String
; returns: param 1 if param 1 is less than param 1, and param 2 otherwise
#function min		  com.ibm.commerce.depchecker.tools.MiscTool::min(2)

; maxList: Return the largest number in a list
; param 1 - a list of number Strings, delimited by param 2
; param 2 - the characters that delimit number Strings, "\n\r" if empty
; returns: the largest number String in the delimited param 1 list
#function maxList	  com.ibm.commerce.depchecker.tools.MiscTool::maxList(2)

; equals: Check if two String are equal
; param 1 - a String
; param 2 - another String
; returns: "true" if param 1 and param 2 are equal, false otherwise
#function equals          com.ibm.commerce.depchecker.common.StringUtils::equals(2)

; notequals: Check if two Strings are not equal
; param 1 - a String
; param 2 - another String
; returns: "true" if param 1 and param 2 are not equal, false otherwise
; #function notequals          com.ibm.commerce.depchecker.common.StringUtils::notEquals(2)

;*** String functions *******************************
; getDigits: Get all digits in a string
; param 1 - a String
; returns: The sequence of digits found in param 1 less any non-digits
#function getDigits       com.ibm.commerce.depchecker.common.StringUtils::getDigits(1)

; trim: Trim a string
; param 1 - a String
; returns: param 1 less leading and trailing whitespace
#function trim            com.ibm.commerce.depchecker.common.StringUtils::trim(1)

; interpret: Interpret escape sequences
; param 1 - a String
; returns: param 1 with escape sequences interpreted
#function interpret	  com.ibm.commerce.depchecker.common.StringUtils::interpret(1)

; startsWith: Check if a String starts with another String
; param 1 - a String
; param 2 - another String
; returns: "true" if param 1 starts with param 2, false otherwise
#function startsWith      com.ibm.commerce.depchecker.common.StringUtils::startsWith(2)

; endsWith: Check if a String ends with another String
; param 1 - a String
; param 2 - another String
; returns: "true" if param 1 ends with param 2, false otherwise
#function endsWith        com.ibm.commerce.depchecker.common.StringUtils::endsWith(2)

; replaceAll: Replace all occurances of a string in a string with another string
; param 1 - a String
; param 2 - a String to be replaced
; param 3 - a String to replace param 2 with
; returns: "param 1 with all occurances of param 2 replaced with param 3
#function replaceAll      com.ibm.commerce.depchecker.common.StringUtils::replaceAll(3)

; clipBefore: Remove up to some substring
; param 1 - A string to clip
; param 2 - a substring of src that follows the region to clip
; returns: The substring before the first occurance of param1, exclusive
#function clipBefore      com.ibm.commerce.depchecker.common.StringUtils::clipBefore(2)

; clipAfter: Remove after some substring
; param 1 - A string to clip
; param 2 - a substring of src that preceeds the region to clip
; returns: The substring after the first occurance of param1, exclusive
#function clipAfter       com.ibm.commerce.depchecker.common.StringUtils::clipAfter(2)

; clipBetween: Remove the middle of two substrings
; param 1 - A string to clip
; param 2 - a substring of src that immediately preceeds the region to clip
; param 3 - a substring of src that occurrs after param 1
; returns: The substring between the occurances of param1 and param2, exclusive
#function clipBetween     com.ibm.commerce.depchecker.common.StringUtils::clipBetween(3)

; clipVersion: First part of a version string
; param 1 - A string to clip
; returns: The first substring of src that is a version string (digits and dots)
#function clipVersion     com.ibm.commerce.depchecker.common.StringUtils::clipVersion(1)

; removeStr: Remove a substring from a String
; param 1 - A string
; param 2 - A substring to remove from string
; returns: param 1 with all occurances of param 2 removed
#function removeStr       com.ibm.commerce.depchecker.common.StringUtils::removeAll(2)

; isValidString: Check if a String is valid
; param 1 - A string
; returns: "true" if the string is null or empty, "false" otherwise
#function isValidString   com.ibm.commerce.depchecker.common.StringUtils::isValidString(1)

; parseVer: Get the digits of a version String
; param 1 - A String of digits
; returns: A dot-delimited version String parsed from the digit String.
#function parseVer        com.ibm.commerce.depchecker.common.VersionTool::parseVersion(1)

;*** Filesystem functions *********************************
; fileExists: Check if a file exists
; param 1 - the name of a file/directory to check
; returns "true" if the file/directory exists, "false" otherwise
#function fileExists	  com.ibm.commerce.depchecker.tools.FSUtils::fileExists(1)

; firstFile: Get the first file that exists in a list of files
; param 1 - a ";" separated list of files to check for existance
; returns the name of the first of the file/directory that exists, "" otherwise
#function firstFile	  com.ibm.commerce.depchecker.tools.FSUtils::firstFile(1)

; readFile: Read a file
; param 1 - the name of a file to read
; returns: the contents of the file
#function readFile        com.ibm.commerce.depchecker.tools.FSUtils::readFile(1)

; listDir: List the contents of a directory
; param 1 - the name of a directory to list
; param 2 - a name delimiter.  If not given, line.separator is used
; returns: A delimited list of file names in the directory
#function listDir         com.ibm.commerce.depchecker.tools.FSUtils::listDir(2)

; grepFileList Grep a file list
; param 1 - the partial file name
; param 2 - the partial extension
; param 3 - list of files
; returns: a comma delimited list of file names with matching partial file names and extensions
; #function grepFileList		com.ibm.commerce.depchecker.tools.FSUtils::grepFileList(3)

; grep and simpleGrep: Frep something
; param 1 - a buffer to grep against
; param 2 - a key to search for.  For simpleGrep, there are no characters
;   with special meanings
; returns: All lines in buffer matching key
#function grep            com.ibm.commerce.depchecker.common.StringUtils::grep(2)
#function simpleGrep      com.ibm.commerce.depchecker.common.StringUtils::simpleGrep(2)

; correctFile: Correct a file path
; param 1 - file with path
; returns: the file with correct slashes and occurances of multiple
;   slashes removed
#function correctFile     com.ibm.commerce.depchecker.tools.FSUtils::formCorrectFile(1)

; dirname: Get a correct directory name
; param 1 - file with path
; returns: the path with file removed (and also correct slashes and occurances
; of multiple slashes removed
#function dirname         com.ibm.commerce.depchecker.tools.FSUtils::dirname(1)

;*** Number operations ******************************
; versionCompare: Compare two version numbers
; param 1 - A String representing a version of the V.R.P.S form
; param 2 - A String representing a comparison operator (and combo of <>= or !=)
; param 3 - A String representing a version of the V.R.P.S form
; returns - The logical boolean result of the implied comparison. Version
;   numbers are compared on a verion basis and not String basis. (ie - 2.1
;   is equal to 2.1.0.0)
#function versionCompare         com.ibm.commerce.depchecker.common.VersionTool::compare(3)

; versionCompareBetween: Check if a version is between two versions
; param 1 - The version to check
; param 2 - The lower version (inclusive)
; param 3 - The upper version (exclusive)
; return - The boolean result if param 1 is between param 2 and param 3
#function versionCompareBetween			com.ibm.commerce.depchecker.common.VersionTool::compareBetween(5)

; numberCompare: Compare two numbers
; param 1 - A String representing a number
; param 2 - A String representing a comparison operator (>, <, =, <=, >=, <>= or !=)
; param 3 - A String representing a number
; returns - The logical boolean result of the implied comparison.
; #function numberCompare		com.ibm.commerce.depchecker.common.NumberTool::compare(3)

; numberCompareBetween: Check if a number is between two numbers
; param 1 - The number to check
; param 2 - The lower version (inclusive)
; param 3 - The upper version (exclusive)
; return - The boolean result if param 1 is between param 2 and param 3
; #function numberCompareBetween			com.ibm.commerce.depchecker.common.NumberTool::compareBetween(3)

#function getInventoryLoc		com.ibm.lconn.wizard.common.depcheck.OracleUtil::getInventoryLoc(0)
#function getOracleHome			com.ibm.lconn.wizard.common.depcheck.OracleUtil::getOracleHome(1)
#function getOracleVersion		com.ibm.lconn.wizard.common.depcheck.OracleUtil::getOracleVersion(1)

;========================================================================
;			           					|
;			real start!					|
;			           					|
;========================================================================
;===============================
;    DB2 detecting begin.	   |
;===============================
  DB2.reg_win_base = "SOFTWARE\IBM\DB2"
  DB2.reg_subkey_exists	= verSubKeyExists("\{DB2.reg_win_base}")

  #constraint DB2_SUBKEY_EXISTS    DB2.reg_subkey_exists=true
  #constraint DB2_SUBKEY_NOTEXISTS !DB2_SUBKEY_EXISTS

  using(DB2_SUBKEY_EXISTS) {
	  DB2.installed = "true";
	  DB2.reg_win_version = "SOFTWARE\IBM\DB2\CurrentVersion"
	  DB2.reg_verion_Version = getRegKey("\{DB2.reg_win_version}\Version")
	  DB2.reg_version_Release = getRegKey("\{DB2.reg_win_version}\Release")
	  DB2.reg_version_Modification = getRegKey("\{DB2.reg_win_version}\Modification")
	  DB2.version = "\{DB2.reg_verion_Version}.\{DB2.reg_version_Release}.\{DB2.reg_version_Modification}";version done here.
	  DB2.reg_win_location = "\{DB2.reg_win_base}\DB2 Path Name"
	  DB2.location = getRegKey("\{DB2.reg_win_location}"); location done here.
  }
  using(DB2_SUBKEY_NOTEXISTS) {
          DB2.installed = "false";	  
  }
  
;===============================
;    Oracle detecting begin.   |
;===============================
  Oracle.reg_win_base = "SOFTWARE\ORACLE\inst_loc"
  Oracle.regkey_exists	= regKeyExists("\{Oracle.reg_win_base}")

  #constraint ORACLE_REGKEY_EXISTS    Oracle.regkey_exists=true
  #constraint ORACLE_REGKEY_NOTEXISTS !ORACLE_REGKEY_EXISTS

  using(ORACLE_REGKEY_EXISTS) {
	  Oracle.installed = "true";
	  Oracle.inventory_dir = getRegKey("\{Oracle.reg_win_base}")
	  Oracle.location = getOracleHome("\{Oracle.inventory_dir}")
	  Oracle.version = getOracleVersion("\{Oracle.location}")
  }
  using(ORACLE_REGKEY_NOTEXISTS) {
          Oracle.installed = "false";	  
  }

;===============================
;  SQLServer detecting begin.  |
;===============================
  SQLServer_100.reg_win_base = "SOFTWARE\Microsoft\Microsoft SQL Server"
  SQLServer_100.reg_subkey_exists = verSubKeyExists("\{SQLServer_100.reg_win_base}\100")
  SQLServer_90.reg_win_base = "SOFTWARE\Microsoft\Microsoft SQL Server"
  SQLServer_90.reg_subkey_exists = verSubKeyExists("\{SQLServer_90.reg_win_base}\90")
  
  #constraint SQLSERVER_100_SUBKEY_EXISTS     SQLServer_100.reg_subkey_exists=true
  #constraint SQLSERVER_100_SUBKEY_NOTEXISTS  !SQLSERVER_100_SUBKEY_EXISTS 
  #constraint SQLSERVER_90_SUBKEY_EXISTS     SQLServer_90.reg_subkey_exists=true
  #constraint SQLSERVER_90_SUBKEY_NOTEXISTS  !SQLSERVER_90_SUBKEY_EXISTS
  
     using(SQLSERVER_90_SUBKEY_EXISTS) {
	   using(SQLSERVER_100_SUBKEY_NOTEXISTS) {
	   SQLServer_90.installed = "true";
	   SQLServer_90.reg_version = "\{SQLServer_90.reg_win_base}\90\Tools\ClientSetup\CurrentVersion\CurrentVersion"
	   SQLServer_90.version = getRegKey("\{SQLServer_90.reg_version}")
	   SQLServer_90.reg_location = "\{SQLServer_90.reg_win_base}\90\Tools\ClientSetup\SQLPath"
	   SQLServer_90.tools_path = getRegKey("\{SQLServer_90.reg_location}")
	   SQLServer_90.location = clipBefore("\{SQLServer_90.tools_path}", "\90\Tools")
	   }
  }   
  
  using(SQLSERVER_100_SUBKEY_EXISTS) {
	   SQLServer_100.installed = "true";
	   SQLServer_100.reg_version = "\{SQLServer_100.reg_win_base}\100\Tools\ClientSetup\CurrentVersion\CurrentVersion"
	   SQLServer_100.version = getRegKey("\{SQLServer_100.reg_version}")
	   SQLServer_100.reg_location = "\{SQLServer_100.reg_win_base}\100\Tools\ClientSetup\SQLPath"
	   SQLServer_100.tools_path = getRegKey("\{SQLServer_100.reg_location}")
	   SQLServer_100.location = clipBefore("\{SQLServer_100.tools_path}", "\100\Tools")
  } 
  
	using(SQLSERVER_100_SUBKEY_NOTEXISTS) {
  	   SQLServer_100.installed = "false";
  }
  using(SQLSERVER_90_SUBKEY_NOTEXISTS) {
  	   SQLServer_90.installed = "false";
  }